=== Boolean Test
[options="header"]
|====
| #| answer | question | correct/wrong
| 1| True | True and True | Correct
| 2| False| False and True | Correct
| 3| False | 1 == 1 and 2 == 1 | Correct
| 4| True | "test" == "test" | Correct
| 5| True | 1 == 1 or 2 != 1 | Correct
| 6| True | True and 1 == 1 | Correct
| 7| False| False and 0 != 0 | Correct
| 8| True | True or 1 == 1 | Correct
| 9| False | "test" == "testing" | Correct
| 10| False | 1 != 0 and 2 == 1 | Correct
| 11| True | "test" != "testing" | Correct
| 12| False | "test" == 1 | Correct
| 13| True | not(True and False) | Correct
| 14| False| not(1 == 1 and 0 != 1) | Correct
| 15| False | not(10 == 1 or 1000 == 1000) | Correct
| 16| False | not(1 != 10 or 3 == 4) | Correct
| 17| True | not("testing" == "testing" and "Zed" == "Cool Guy") | Correct
| 18| True | 1 == 1 and not("testing" == 1 or 1 == 0) | Correct
| 19| False | "chunky" == "bacon" and not(3 == 4 or 3 == 3) | Correct
| 20| False | 3 == 3 and not("testing" == "testing" or "Python" == "Fun")
|====


=== decoding the true/false statemnt

memorise the true or and True or tables

prepending them with not = taking the outut of the previous, and reversing it. 
e.g. True would turn to false

=== and

any combination of True *and* False with the 
True and False = False
exception of -
True *and* True = True

=== or

Any combination of False *or* true = True
*Exception* False *or* False = False

=== Python Bolean Comparisons
[options="header"]
|====
|Operation |	Meaning	Notes
|< |	strictly less than	 
|<= |	less than or equal	 
|> |	strictly greater than	 
|>= |	greater than or equal	 
|== |	equal	 
|!= |	not equal	(1)
|is |	object identity	 
|is not	| negated object identity	 
|====

=== Equality Operators - Python Operators similar to != and == 

link::http://www.tutorialspoint.com/python/python_basic_operators.htm [python basic operators]

==== Python Arithmetic Operators

Assume variable a holds 10 and variable b holds 20, then:

[options="header"]
|====
|Operator	Description	Example
|+ |	Addition - Adds values on either side of the operator	 a + b will give 30
|- |	Subtraction - Subtracts right hand operand from left hand operand	 a - b will give -10
|* |	Multiplication - Multiplies values on either side of the operator	 a * b will give 200
|/ |	Division - Divides left hand operand by right hand operand	 b / a will give 2
|% |	Modulus - Divides left hand operand by right hand operand and returns remainder	 b % a will give 0
|** |	Exponent - Performs exponential (power) calculation on operators	 a**b will give 10 to the power 20
|\// |	Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed.	 9//2 is equal to 4 and 9.0//2.0 is equal to 4.0
|==== 

==== Python Assignment Operators

Assume variable a holds 10 and variable b holds 20, then:


[options="header"]
|====
| Operator	| Description	Example
| =	| Simple assignment operator, Assigns values from right side operands to left side operand	 c = a + b will assigne value of a + b into c
| +=	| Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand	 c += a is equivalent to c = c + a
| -=	| Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand	 c -= a is equivalent to c = c - a
| *=	| Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand	 c *= a is equivalent to c = c * a
| /=	| Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand	 c /= a is equivalent to c = c / a
| %=	| Modulus AND assignment operator, It takes modulus using two operands and assign the result to left operand	 c %= a is equivalent to c = c % a
| **=	| Exponent AND assignment operator, Performs exponential (power) calculation on operators and assign value to the left operand	 c **= a is equivalent to c = c ** a
| //=	| Floor Dividion and assigns a value, Performs floor division on operators and assign value to the left operand	 c //= a is equivalent to c = c // a
|==== 

==== Python Bitwise Operators:
Bitwise operator works on bits and perform bit by bit operation. Assume if a = 60; and b = 13; Now in binary format they will be as follows:

----
a = 0011 1100

b = 0000 1101

----

----
a&b = 0000 1100

a|b = 0011 1101

a^b = 0011 0001

~a  = 1100 0011
----
There are following Bitwise operators supported by Python language

[options="header"]
|====
| Operator |	Description	Example
| & |	 Binary AND Operator copies a bit to the result if it exists in both operands.	 (a & b) will give 12 which is 0000 1100
| \| |	 Binary OR Operator copies a bit if it exists in eather operand.	 (a \| b) will give 61 which is 0011 1101
| ^ |	 Binary XOR Operator copies the bit if it is set in one operand but not both.	 (a ^ b) will give 49 which is 0011 0001
| ~ |	 Binary Ones Complement Operator is unary and has the efect of 'flipping' bits.	 (~a ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.
| << |	 Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.	 a << 2 will give 240 which is 1111 0000
| >> |	 Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.	 a >> 2 will give 15 which is 0000 1111
|====


==== Python Logical Operators:
There are following logical operators supported by Python language. Assume variable a holds 10 and variable b holds 20 then:


[options="header"]
|====
| Operator |	Description	Example
| and |	 Called Logical AND operator. If both the operands are true then then condition becomes true.	 (a and b) is true.
| or |	Called Logical OR Operator. If any of the two operands are non zero then then condition becomes true.	 (a or b) is true.
| not |	Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.	 not(a and b) is false.
| Python | Membership Operators:
|====


==== Python Identity Operators:
Identity operators compare the memory locations of two objects. There are two Identity operators explained below:

[options="headers"]
|====
|Operator |	Description	Example
|is |	Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.	 x is y, here is results in 1 if id(x) equals id(y).
|is | not	Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.	 x is not y, here is not results in 1 if id(x) is not equal to id(y).
|====

==== Python Operators Precedence
|The  following table lists all operators from highest precedence to lowest.

[options="headers",format="dsv"]
|====
:Operator :	Description
:**	Exponentiation (raise to the power)
:~ /+ /-  ,:	Complement, unary plus and minus (method names for the last two are +@ and -@)
:* / % //	:Multiply, divide, modulo and floor division
:+ -	:Addition and subtraction
:>> <<	:Right and left bitwise shift
:&	:Bitwise 'AND'
:^ :	:Bitwise exclusive `OR' and regular `OR'
:<= < > >=	:Comparison operators
:<> == !=	:Equality operators
:= %= /= //= -= += *= **=	:Assignment operators
:is is not	:Identity operators
:in not in	:Membership operators
:not or and	:Logical operators
|====

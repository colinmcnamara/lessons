=== Modules, Classes and Objects

Apparently the chapter where most people quit.
Transitioning between scripting and development.

=== Classess add consistency 

you can use classes to impart structure. 
This lesson will be the begining in learning about object oriented programming.

=== ACTION -  read more about OOP

=== Modules are like dictionaries

Example dictionary code 

[source, python]
----
# dictionary with a key 'apple' you want then you do this :

mystuff = {'apple': "I AM APPLES!"}
print mystuff['apple']
----

==== Modules are
. A python file with some functions or variables in it
. You then import that file
.. from blah import blah 
.. or import blah (blah = the file / mod you made)
. Then yo ucan access the functions of that module through the '.'(dot) operator

==== Module named +mystuff.py+ w/ a function called +apple+

used in example code

.module we created 
[source, python]
----
def apple():
	print "I AM APPLES!"

# this is just a variable
tangerine = "Living reflection of a dream"
----

.Code that refrenced the module
[source, python]
----
# dictionary with a key 'apple' you want then you do this :

#mystuff = {'apple': "I AM APPLES!"}
#print mystuff['apple']

import mystuff

# Necessary to load the apple function apparently.
mystuff.apple()

def apple():
	print "I AM APPLES!"

print mystuff.tangerine
----

=== Comparing dict, module and variable

[source, python]
----

mystuff['apple'] # Get apple from a dict
mystuff.apple() # Get apple from the module mystuff
mystuff.tangerine # pull the variable tangerine from a module name mystuff
----

Common python pattern 
. Take a key=value style container
. Get something out of the container by name

=== Classes are like modules

Modules are a specialized dictionary that can store python code so you can get to it with the '.' operator. 

==== Classes are similar

A class is a way to take a grouping of functions *AND DATA* and place them in a container that you can access with the '.' operator. 

=== Objects are like mini-imports
instead of import you instantiate (create)
*When you create a class you get an object*

=== Creating and object with the class function

=== __init__ *TWO UNDERSCORES*
when you initialize (set) a variable in a class using __init__ that is _ _ i n i t _ _ 

=== Python class checklist
Example code to reference 


[source, python]
----

class MyStuff(object):

    def __init__(self):
        self.tangerine = "And now a thousand years between"

    def apple(self):
        print "I AM CLASSY APPLES!"
----

[source, python]
----
thing = MyStuff()
thing.apple()
print thing.tangerine
----

. Python looks for +MyStuff()+ and sees it's a class
. Python creates an empty object with all the functions that you have specified in the class using +def+
. Python then looks for the "Magic" +__init__ function, and calls that function to intialize your empty object
. In the +MyStuff()+ function +__init__+ we then get this extra variable +self+ which is that empty object python made for me. and we can set variables on it just like you would a module,dict or other object. 
. In this case we set +self.tangerine+ to a song lyric and then itialized it. 
. Then we took the object, assigned it to +thing+ for us to call, and print

=== More important thoughts on classes
. Classes are like bluerprint or definitions for creating new _mini-modules_
. Instantiation is how you make on _and_ import it at the same time
. The resulting created mini-module is an +object+ which you thne assign variables to work with it.

=== Comparing the three methods


[source, python]
----
#dict style
mystuff['apples']

#module style
mystuff.apples()
print mystuff.tangerine

#class style
thing = MyStuff()
thing.apples()
print thing.tangerine

----

=== Resources

http://stackoverflow.com/questions/20216376/learn-python-hard-way-exercise-40-class-query?newreg=c6ccc1d7ddce454ab71b523fff818e22[stackexchange article on lesson 40]


=== StackExchange explanation 
Firstly, linking to the original example is a good idea. I am using line numbers from the original example.

. Lines 1 to 8 define a class called Song. A class is exactly like a blueprint for making a new object. Every function that you add to a class will be added to the object when you make the object.

. +Song+ is on the right side on line 10 and 14 because you are making new Song objects, and putting them in variables. You don't even need to put the Song object inside a variable. The following would work just fine:

----
Song(["Do","Re","Mi"]).sing_me_a_song()
----

. What is the difference between this:

----
print("Hi!")
----

And this?

----
message = "Hi!"
----
----
print(message)
----

In the one you pass a value directly, and in the other you pass a variable that contains the value. Just like "Hi!" is a value, ["Do","Re","Mi"] is a value too. How would you pass the second value to a new Song object?
 
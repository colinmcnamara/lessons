=== is-a, has-a object and classes

=== Salmon Example

What is the difference betweek a fish and a salmon?

Fish is a class, Salmon is a class that is contained within the class fish

if you put 3 fish in a bucket, and name 2 of them frank and mary. 

All three are class fish

All three are in the class salmon

frank and mary are just an instance of salmon (they are objects)

mary = salmon(her-unique attributes)

They are created from salmon but have unique attributes

=== Class

Class is not a _real_ thing. But rather a word we attache to instances of things with similar attributes

. fins
. gills
. lives in water

probably in class fish

=== Key concept - Objects are created from classes. 

Classes are just the templates that we start with. 

=== Figuring out whether something is a class or an object

==== is-a vs has-a

when you talk about objects and classes being related to each other by a class relationship you use *is-a*

*Salmon IS-A fish*

when an object or class is only related you use 

*Salmon HAS-A Gill*

Colin *is-a* class human and *has-a* class hand

=== self.name 
or blah.name whatever


[source, python]
----
self.name = name
----

gets the object name and sets it as a string. Neet.


=== Python Super __init__ method
. Super lets you avoid referring to the ebase class explicitly.

. Main advantage comes from multiple inheritance. 

http://www.artima.com/weblogs/viewpost.jsp?thread=236275[Post on super]

http://docs.python.org/2/library/functions.html#super[Python Doc's on super]

=== RULE - Python always requires (object) when you make a class

this is due to some oversight early in the language

=== Python object class

=== Programming Types
Two main things, commonly defined as scripting and programmming.

==== Procedural Programming - Scripting
This is my past. focus on automating processured which operate on data

==== My future - object oriented programming
Creating creation of objects that contain both data and functions


=== Python class and objects
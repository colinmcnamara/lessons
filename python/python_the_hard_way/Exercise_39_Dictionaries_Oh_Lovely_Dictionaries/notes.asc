=== Dictionaries

=== Thoughts on my last game
*I could have used a dictionary vs comparing two lists!*

=== Quick Tip for Dictionaries - { use a different bracket }

Dictionaries use curly braces, vs straight

=== Quick Tip for Dictionaries ' vs "

Not sure if it is just style. But notice that ticks vs quotes are used. (single vs double)

=== Example dictionary list
[source, python]
----
dictionaryname['room_message' : 'which door do you choose' ,'Door 1': 'room_fired', 'Door 2': 'room_promoted', 'Door 3': 'room_day_off'] 
----

print dictionaryname['room_message']
>>> which door do you choose

=== inserting new item into dictionary
You can just call out the field, and the data. 


[source, python]
----
dictionaryname['Door 4'] = 'room_delegate'
----
>>>> print dictionaryname
{'room_message' : 'which door do you choose' ,'Door 1': 'room_fired', 'Door 2': 'room_promoted', 'Door 3': 'room_day_off']}

=== Deleting from a dictionary


[source, python]
----
# delete by name 
del dictionaryname['Door 1']

# delete by index number
del dictionaryname [2]
----

>>>> print dictionaryname
{'room_message' : 'which door do you choose' , 'Door 3': 'room_day_off']}

=== dictname.items() - the items operator

something .items() prints out the objects with th list or dictionary they refer too

=== Combine two dicts in a print statement

you can lookup an item across two dictionaries in one statemetn

[source, python]
----
listname1[comparedlistname['lookup']]
----

This example looks up the city by putting in the state abbreviation (which is effectively the key in the dict)

[source, python]
----
print '_' * 10 
for state, abbrev in states.items():
	print "%s state is abbreviated %s and has city %s" % (
		state, abbrev, cities[abbrev])
----

=== Special word - None

in tihs example the word None is used to represent the absense of a value.

[source, python]
----
state = states.get('Texas', None)
----

=== .get() method

Return a value for a specific key

In this example we are getting the key for 'TX' 

[source, python]
----
# get a city with a default value
city =  cities.get('TX', 'Does Not Exist')
print "The city for the state 'TX' is: %s" % city 
----

=== Key error
Python raises a KeyError whenever a dict() object is requested (using the format a = adict[key]) and the key is not in the dictionary.

=== What can't you do with dictionaries?

# duplcate keys - only displays the last one
# you can get around this by storing lists or sets inside of the dictionary

# you can get a dictionary of lists by using the following

=== Ordering in Dictionaries

dict() does not have order. If you want an ordered dictionary then use 

OrderedDict() which is default in python 2.7

[source, python]
----
from collections import defaultdict
data_dict = defaultdict(list)

# all you have to do is replace
data_dict[regNumber] = details

# with
data_dict[regNumber].append(details)

# and you'll get a dictionary of lists
----

=== My switch, host, location code created from lesson

[source, python]
----
# Create a mapping of labs
labs = {
	'Pleasanton-Lab': 'SW1',
	'Irvine-Lab': 'SW2',
	'Atlanta-Lab': 'SW3'
}

# Define what ports are on each switch
switchports = {
	'SW1': 'Ge1-1',
	'SW2': 'Ge2-1',
	'SW3': 'Ge3-1'
}

# create a host port mapping
hosts_switchports = {
	'Ge1-1': 'puppet.denicacloud.com',
	'Ge2-1': 'jenkins.denicacloud.com',
	'Ge3-1': 'gerrit.denicacloud.com'
}

# Note this only prints out a single (the last) item
print '_' * 10 

print "Atlanta-Lab contains", labs['Atlanta-Lab']

# Print out a specific host port location
print '_' * 10 
print "Ge1-1 will always contain ", hosts_switchports['Ge1-1'] 

# Look up based on labs then switchport dict
# Returns the last item in list
print '_' * 10 
print "Irvine-lab port is: ", switchports[labs['Irvine-Lab']] 

# Print out every lab labs
print '_' * 10 
for lab, switch in labs.items():
	print "%s is located in %s" % (switch, lab)

# Multi-lookup Print out hosts in switch in lab
print '_' * 10 
for lab, abbrev in labs.items():
	print "%s contains %s which has port %s" % (lab, abbrev, 
		switchports[abbrev])#

## multi-mutli lookup. Lookup what hosts are containted in each lab
print '_' * 10 
for lab, abbrev in labs.items():
	switch = abbrev
#	print "Switch = %s" % switch
	returned_port = switchports[switch]
#	print "Returned Port = %s" % returned_port
	print "%s contains %s which has host %s on port %s " % (lab, switch,
	 hosts_switchports[returned_port], switchports[switch])

----


=== Lesson code 

[source, python]
----
# Create a mapping of state to abbreviation
states = {
	'Oregon': 'OR',
	'Florida': "FL",
	'California': 'CA',
	'New York': 'NY',
	'Michigan': 'MI'
}

# Create a basic set of states and some cities in them
cities = {
	'CA': 'San Francisco',
	'MI': 'Detroit',
	'FL': 'Jacksonville'
}

# Add some more cities
cities['NY'] = 'New York'
cities['OR'] = 'Portland'

# print out some cities
print '_' * 10
print "NY State has: ", cities['NY']
print "OR State has: ", cities['OR']

# print some states
print '_' * 10
print "Michigan's abbreviation is: ", states['Michigan']
print "Florida's abbreviation is: ", states['Florida']

# do it by using the state then cities dict
print '_' * 10 
print "Michigan has: ", cities[states['Michigan']]
print "Florida has: ", cities[states['Florida']]

# print every state abbreviation
print '_' * 10 
for state, abbrev in states.items():
	print "%s is abbreviated %s" % (state, abbrev)

# print every city in state
print '_' * 10 
for city, abbrev in cities.items():
	print "%s has the city %s" % (abbrev, city)

# now do both at the same time
# this looks up the city by the state abbrevation
print '_' * 10 
for state, abbrev in states.items():
	print "%s state is abbreviated %s and has city %s" % (
		state, abbrev, cities[abbrev])

print '_' * 10 
# safely get a abbreviation by state that might not be there
state = states.get('Texas', None)

if not state:
	print "Sorry no Texas."

# get a city with a default value
city =  cities.get('TX', 'Does Not Exist')
print "The city for the state 'TX' is: %s" % city 
----



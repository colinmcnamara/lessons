=== Top down Object Oriented Programmings

Overview of "Top Down" Methodology for Programming

. Write or draw the problem
. Extract key concepts from #1 and research them
. Create a class heirachy and research them
. Code the classes and test to run them
. Repeat and refine

=== Write or draw the problem

Methods
. Create a diagram - UML 
. Mind Map
. Visio Diagram
. Cards in Scrivener
. Write up a series of emails

=== Harvest created-content for concepts

 Make a list
. Nouns
. Verbs
. *Their Relationships

Result - Good list of classes and functions for next step

=== Create an outline tree
. Concepts 
. Their relationships as classes

*MindMap would be perfect I think* 

. Identify like topics
.. Like topics probably share a parent class

=== Refine your outline - Classes
Refine parent child relationships of classes and objects until you have a simplified tree. 

. Take list of nouns. Identify list of nouns that are like one another
. Use that commonality to identify a common parent class
. Keep iterating until you have a class hierchy

=== Define your functions
. Take the vebs from the list you created
. see if those are function names for each class
. Put them in your tree

=== Put together skeleton code framework
Consising of *ONLY*
. Classes
. Their functions
. *NOTHING MORE*

=== Write Tests (TDD in action)
Write tests
. Validate Class Functionality
. Write part of the test, a little code, iterate

=== Iterate process until code is functional
Keep going until blocked. 
If you get stuck. Start with diagram, nouns verbs, etc in that section to complete.

=== Game Design - Gothons from Planet Percel #25

http://learnpythonthehardway.org/book/ex43.html

=== Overview

Aliens have invaded a space ship and our hero has to go through a maze of a rooms defeatin them so he can escape into an escape pod to the planet below. The game will be more like a Zork or Adventure type game with text outputs and funny ways to die. The game will involve an angine that runs a map full of rooms or scense. Each room will print its own description when the player enter it, and tell the enginee what room to run nex ton the map.

=== Scenes

==== Scene1

*Death* 
 This is where the player dies and should be funny

*Central Corridor*
Starting point with Gothon already standing there

*Laser Weapon Armory*
This is where the hero gets a neutron bomb to blow up the shoip before getting into the escape pod. It has a keypad he has to guess the number for.

*The Bridge
Another battle scene with a Gothon where the hero places the bomb

*Escape Pod*
Where the hero escapes but only after guessing the right escape pod



=== Extract key concepts (Nouns)

* Alien
* Player
* Ship
* Maze
* Room
* Scene
* Gothon
* Escape Pod
* Planet
* Map
* Engine
* Death
* Central Corridor
* Laser Weapon Armory
* The Bridge

=== Estimate functional requirements

Find a similar implimentation. Figure out how it works
Identify any shared dependancies (new data layer for example)

Possbly start over at the design side if you have new information that impacts the overall code structure

=== Create the Class Heirchy
* Map
* Engine
* Scene
** Death
** Central Corridor
** Laser Weapon Armory
** The Bridge
** Escape Pod

=== Figure out what actions are necessary

* Map
	** _next_scene_
	** _opening_scene_
* Engine
	** _play_
* Scene
	** _enter_
	** Death
	** Central Corridor
	** Laser Weapon Armory
	** The Bridge
	** Escape Pod

.Creating your functions from verbs
NOTE: Italisized items are _verbs_ that describe the movement between scenes. These _verbs_ become your functions. 

[[image]]
.Mind Map of game
image::../figures/gothon_mind_map.png[scaledwidth="75%"]

=== Code Classes and test to run them
. Copy paste the previously created tree
. Edit so they become classes
. Write a *SIMPLE* test to run the classes

.making an empty class work - pass
NOTE: when you structure your empty classes use the word +pass+ in the function to make it work while empty 

=== Iterate above steps 
Use this method to improve and explore the code. Building it up stronger and stronger until code complete

=== Top down vs Bottom up
. Start with the abstract vs the functional
. Use for all new problems in the book

=== Simple Checklist 
. Take a small piece of the problem; hack on some code and get it to run barely.
. Refine the code into something more formal with classes and automated tests.
. Extract the key concepts you're using and try to find research for them.
. Write up a description of what's really going on.
. Go back and refine the code, possibly throwing it out and starting over.
. Repeat, moving on to some other piece of the problem.

=== Game Build Notes

building the example game. here are my notes from each step.

==== Build framework
. Created MindMap and created class and functions out of nouns and verbs.
. Used MindMap as framework to create base classes and function
. Put comments around functions that have the notes from created earlier

==== Data Layer - Choose data storage method
. Evaluating Dictionary 

.Duplicate Keys in Dictionaries
NOTE: dictionaries alone don't support duplicate keys

. Storing lists or sets inside the dictionary 

.Store multiple lists or sets inside dictionary w/ defaultdict
[NOTE]
====
[source, python]
----
from collections import defaultdict

data_dict = defaultdict(list)
----

you can use the first parameter (list) to then populate or retrieve informatoin about the game
====

Thoughts
. scene_name could be the index name
. Going to need actions and classes for 


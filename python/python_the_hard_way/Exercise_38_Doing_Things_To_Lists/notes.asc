=== Doing things to lists
All sorts of cool list operations

=== .pop
example 

[source, python]
----
x = my_2nd_list.pop()
print "%s is the last item in my_2nd_list" % x

----
would place the last element in my_2nd_list into x and display it with print

=== changing how a list is seperated

in this example we take a list seperated by spaces, and split them with ' '

[source, python]
----

ten_things = "Apples Oranges Crows Telephone Light Sugar"

print "Wait there's not 10 things in that list, let's fix that."

stuff = ten_things.split(' ')
----
output - 

here is the old list Apples Oranges Crows Telephone Light Sugar
here is the new list ['Apples', 'Oranges', 'Crows', 'Telephone', 'Light', 'Sugar']

notice how the new list has ticks around the items, and comma's seperating values. good for CSV? 

though we should probably just use a module for CSV work.

=== returing the first element of a list - listname[1]
prints the first index of a list

[source, python]
----

print listname[1]
----



=== Return index -1 (that's the last element) listname[-1]

[source, python]
----

print listname[-1]
----

=== .join
in this example, join each element together with a space between them

[source, python]
----
print ' '.join(stuff)
----
output = Apples Oranges Crows Telephone Light Sugar Boy Girl Banana

=== print '#'.join(stuff[3:5]) 
join index 3 and 5 together with the seperator #

[source, python]
----
print '#'.join(stuff[3:5]) # super stellar
----
output = Telephone#Light

=== object oriented programming

deeper dive on OOP taken from here - 

http://www.codeproject.com/Articles/22769/Introduction-to-Object-Oriented-Programming-Concep#OOP

Rather then use a procedural way of doing things (C, etc). Object oriented programming is grouped into self sustainable "objects" that provide for re-usability

[[Oop_Table]]
.Object Oriented Programming Architectural Overview
image::../figures/oop.jpg[]

==== example - your hand

Hand is a class
your body contains two objects called hand
	these are named left and right

These objects are controlled by electrical signals send through your -
	shoulders (an interface)

Your shoulder is an interface your body uses to interact with your hands.

Hand is a well architected class, the hand being re-used for left and right usage with minor modifications

===== what is an object

an Object is a "thing" that can peform a set of activities. 

===== Example

the hand can grip something or, a +student(object)+ can give the name or address

in pure Object Oriented Programming terms an object is an instance of a class

===== what is a class ?
A class is representation of a type of +object+

It is the blueprint /plan /template that describes the details of an object.

[[Class_Table]]
.visual representation of a class
image::../figures/class.gif[]


===== Class components
* name
* attributes
* operations

=== Class in Python

* Minimal new syntaxes added
* Class inheritance supported
** multiple base classes supported.
* derived class
** can overide methods of its base classes or methods
* a method can call the method of a base class with the same name
* objects can contain arbitrary amounts of data

==== dir(something) vs the "Class" or something

dir() or dir(something) shows all the things inside of something.

This can be a list, a module, a class, etc

a class is the grouping of objects and information.

=== code

[source, python]
----

----